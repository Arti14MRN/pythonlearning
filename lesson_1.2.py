#1. Создать список и заполнить его элементами различных типов данных. Реализовать скрипт проверки типа данных каждого элемента.
# Использовать функцию type() для проверки типа. Элементы списка можно не запрашивать у пользователя, а указать явно, в программе.
def task_1():
    my_list = [1, '1', 1.0]
    for i in my_list:
        print(f'{i} является типом {type(i)}')
#2. Для списка реализовать обмен значений соседних элементов. Значениями обмениваются элементы с индексами 0 и 1, 2 и 3 и т. д.
# При нечётном количестве элементов последний сохранить на своём месте. Для заполнения списка элементов нужно использовать функцию input()
def task_2():
    my_list = input("Введите числа: ").split()
    for i in range(0, len(my_list) - 1, 2):
                    #0, 5-1, шаг 2:
                    #1,2 = 2,1
                    #2,3 = 3,2
        my_list[i], my_list[i + 1] = my_list[i + 1], my_list[i]
    print(my_list)
#Пользователь вводит месяц в виде целого числа от 1 до 12. Сообщить, к какому времени года
#относится месяц (зима, весна, лето, осень). Напишите решения через list и dict.
def task_3():
    number_of_user = input("введите от 1 до 12:")
    number_of_month_list = [
    'зима', 'зима', 'весна',
    'весна', 'весна', 'лето',
    'лето', 'лето', 'осень',
    'осень', 'осень', 'зима']
    number_of_month_dict = {
    1: 'зима', 2: 'зима', 3: 'весна',
    4: 'весна', 5: 'весна', 6: 'лето',
    7: 'лето', 8: 'лето', 9: 'осень',
    10: 'осень', 11: 'осень', 12: 'зима'
    }
    print(number_of_month_dict.get(int(number_of_user)))
    print(number_of_month_list[int(number_of_user)-1])
#4 Пользователь вводит строку из нескольких слов, разделённых пробелами. Вывести каждое
#слово с новой строки. Строки нужно пронумеровать. Если слово длинное, выводить только
#первые 10 букв в слове.
def task_4():
    something_user_words = input("введите слова через пробел:")
    my_list = something_user_words.split()
    for i,word in enumerate(my_list):
        if len(word) < 10:
            print(f'{i+1} {word[:10]}')
# Реализовать структуру «Рейтинг», представляющую собой набор натуральных чисел, который
# не возрастает. У пользователя нужно запрашивать новый элемент рейтинга. Если в рейтинге
# существуют элементы с одинаковыми значениями, то новый элемент с тем же значением
# должен разместиться после них.
# Подсказка. Например, набор натуральных чисел: 7, 5, 3, 3, 2.
# Пользователь ввёл число 3. Результат: 7, 5, 3, 3, 3, 2.
# Пользователь ввёл число 8. Результат: 8, 7, 5, 3, 3, 2.
# Пользователь ввёл число 1. Результат: 7, 5, 3, 3, 2, 1.
# Набор натуральных чисел можно задать сразу в коде, например, my_list = [7, 5, 3, 3, 2].
def task_5():
    my_list = [7, 5, 3, 3, 2]
    user_number = input("введите число:")
    my_list.append(int(user_number))
    my_list.sort()
    my_list.reverse()
    print(my_list)
# 6. * Реализовать структуру данных «Товары».
# Она должна представлять собой список кортежей.
# Каждый кортеж хранит информацию об отдельном товаре.
# В кортеже должно быть два элемента — номер товара и словарь с параметрами (характеристиками товара:
# название, цена, количество, единица измерения).
# Структуру нужно сформировать программно, т.е. запрашивать все данные у пользователя.
# Пример готовой структуры:
# [
#     (1, {“название”: “компьютер”, “цена”: 20000, “количество”: 5, “eд”: “шт.”}),
#     (2, {“название”: “принтер”, “цена”: 6000, “количество”: 2, “eд”: “шт.”}),
#     (3, {“название”: “сканер”, “цена”: 2000, “количество”: 7, “eд”: “шт.”})
# ]
# Необходимо собрать аналитику о товарах. Реализовать словарь,
# в котором каждый ключ — характеристика товара, например название,
# а значение — список значений-характеристик, например список названий товаров.
# Пример:
# {
#     “название”: [“компьютер”, “принтер”, “сканер”],
#     “цена”: [20000, 6000, 2000],
#     “количество”: [5, 2, 7],
#     “ед”: [“шт.”]
# }

# Для тестирования
# products = [
#     (1, {'название': 'Перец болгарский', 'цена': 19, 'количество': 5, 'eд': 'кг'}),
#     (2, {'название': 'Масло сливочное', 'цена': 102, 'количество': 5, 'eд': 'пачка'}),
#     (3, {'название': 'Кортофель', 'цена': 19, 'количество': 6, 'eд': 'кг'})
# ]
def task_6():
    products = []
    user_count_products = input("введите количество позиций:")
    count = int(user_count_products)
    for i in range(1, count):
        print(f"Заполняем информацию по {i}-му товару")
        product_name = input("Название: ")
        product_price = int(input("Цена: "))
        product_count = int(input("Количество: "))
        product_measure = input("Единица измерения: ")
        products.append(
            (i, {'название': product_name, 'цена': product_price, 'количество': product_count, 'eд': product_measure}))

    print(f"Исходный список товаров: \n{products}")

    product_names = []
    product_prices = []
    product_counts = []
    product_measures = []
    for i in products:
        product_names.append(i[1].get('название'))
        product_prices.append(i[1].get('цена'))
        product_counts.append(i[1].get('количество'))
        product_measures.append(i[1].get('eд'))

    report = {
        'название': list(set(product_names)),
        'цена': list(set(product_prices)),
        'количество': list(set(product_counts)),
        'eд': list(set(product_measures))
    }

    print(f"Отчет по списку товаров: \n{report}")


if __name__ == "__main__":
    task_1()
    task_2()
    task_3()
    task_4()
    task_5()
    task_6()
